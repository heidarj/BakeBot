@using System.Linq.Expressions
@typeparam TItem

@if (items != null && items.FirstOrDefault() is TItem firstItem)
{
	<table class="table">
		<thead>
			<tr>
				@if(ColumnNames != null && ColumnNames.Any()){
					@foreach (var selector in ColumnNames)
					{
						<td>@selector.Compile().Invoke(firstItem)</td>
					}
				}
				@if((ColumnNames == null || !ColumnNames.Any()) && Columns != null && Columns.Any()){
					@foreach (var selector in Columns)
					{
						<td></td>
					}
				}
			</tr>
		</thead>
		<tbody>
			@foreach (var item in items)
			{
				<tr @key="item">
					@if(Columns != null && Columns.Any())
					{
						@foreach (var selector in Columns)
						{
							<td @onclick="() => OnItemClick?.Invoke(item)">@selector.Compile().Invoke(item)</td>
						}
					}
				</tr>
			}
		</tbody>
	</table>
}

@code {
	[Parameter]
	public IEnumerable<TItem>? items { get; set; }

	[Parameter]
	public List<Expression<Func<TItem, string>>>? ColumnNames { get; set; }

	[Parameter]
	public List<Expression<Func<TItem, string>>>? Columns { get; set; }

	[Parameter] 
	public Action<TItem>? OnItemClick { get; set; }
}
