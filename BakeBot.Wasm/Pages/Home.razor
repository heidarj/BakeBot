@inject RecipeService RecipeService
@inject NavigationManager NavigationManager
@page "/"

<PageTitle>BakeBot</PageTitle>

<h1>Popular recipes</h1>
<FluentSearch @bind-Value="SearchValue"
              @bind-Value:after="Filter"
			  style="width: 100%;"
              Placeholder="Search for name" />

<FluentDataGrid Items="Recipes" TGridItem="Recipe" ShowHover="true" OnRowClick="OnRowClick">
	<PropertyColumn Property="@(r => r.Name)" Sortable="true"/>
	<TemplateColumn Title="Tags" Filtered="@(SelectedTags.Any())">
		<ChildContent>
			<FluentOverflow Style="width: 100%;">
				@foreach (var tag in context.Tags)
				{
					<FluentOverflowItem><FluentBadge>@tag</FluentBadge></FluentOverflowItem>
				}
			</FluentOverflow>
		</ChildContent>
		<ColumnOptions>
            <div class="search-box">
                <FluentAutocomplete TOption="string" Width="100%" OnOptionsSearch="@OnSearchAsync" @bind-SelectedOptions="@SelectedTags" @bind-SelectedOptions:after="@Filter"/>
            </div>
        </ColumnOptions>
	</TemplateColumn>
</FluentDataGrid>

@code {
	private IQueryable<Recipe>? Recipes { get; set; }
	private IQueryable<Recipe>? FilteredRecipes => Recipes = Recipes?.Where(r => r.Tags.Intersect(SelectedTags).Count() == SelectedTags.Count());
	private IEnumerable<string> SelectedTags { get; set; } = new List<string>();
	private string SearchValue { get; set; } = string.Empty;

	protected override void OnInitialized()
	{
		Recipes = RecipeService.Recipes.AsQueryable();
	}

	private void Filter()
	{
		Recipes = RecipeService.Recipes.AsQueryable();
		if (!string.IsNullOrWhiteSpace(SearchValue))
			Recipes = Recipes.Where(r => r.Name.Contains(SearchValue, StringComparison.OrdinalIgnoreCase));
		if (SelectedTags.Any())
			Recipes = Recipes.Where(r => r.Tags.Intersect(SelectedTags).Count() == SelectedTags.Count());
	}

	private async Task OnSearchAsync(OptionsSearchEventArgs<string> e)
    {
        e.Items = RecipeService.Recipes.SelectMany(r => r.Tags).Distinct()
					.Where(i => i.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
					.OrderBy(i => i);
		
		await Task.FromResult(true);
    }

	private void OnRowClick(FluentDataGridRow<Recipe> row)
	{
		if (row.Item != null)
			NavigationManager.NavigateTo($"/recipe/{row.Item.Id}");
	}
}